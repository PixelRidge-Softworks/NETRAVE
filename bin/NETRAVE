#!/usr/bin/env ruby
# frozen_string_literal: true

require 'dotenv'
require 'debug'
require_relative '../lib/utils/system_information_gather'
require_relative '../lib/utils/database_manager'
require_relative '../lib/utils/first_run_init'
require_relative '../lib/utils/utilities'
require_relative '../lib/utils/logg_man'

include Utilities # rubocop:disable Style/MixinUsage

loggman = LoggMan.new

# Create .env file if it doesn't exist
File.open('.env', 'w') {} unless File.exist?('.env')

# Load environment variables from .env file
Dotenv.load

# Initialize DatabaseManager
db_manager = DatabaseManager.new

# Get database details from environment variables
db_details = {
  username: ENV['DB_USERNAME'],
  password: ENV['DB_PASSWORD'],
  key: ENV['DB_SECRET_KEY'],
  database: ENV['DB_DATABASE']
}

# If any of the necessary details are missing, run the first run setup
if db_details.values.any?(&:nil?)
  loggman.log_warn('Missing or incomplete configuration. Running first run setup.')
  first_run_init = FirstRunInit.new(db_manager)
  first_run_init.run
  # Reload environment variables after first run setup
  Dotenv.load
  username = ENV['DB_USERNAME']
  password = ENV['DB_PASSWORD']
  key = ENV['DB_SECRET_KEY']
  database = ENV['DB_DATABASE']
end

# Test connection
dec_pass = decrypt_string_chacha20(password, key)
unless db_manager.test_db_connection(username, dec_pass, database)
  loggman.log_warn('Failed to connect to the database with existing configuration. Please re-enter your details.')
  first_run_init = FirstRunInit.new(db_manager)
  first_run_init.run
end

# Test connection again after potentially updating config
if db_manager.test_db_connection(username, dec_pass, database)
  loggman.log_info('Successfully connected to the database.')
else
  loggman.log_error('Failed to connect to the database. Please check your configuration.')
  exit 1
end

puts 'Program successfully ran with no errors'
# TODO: Add the rest of your application logic here
